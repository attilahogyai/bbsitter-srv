//buildscript {
    repositories {
		maven { url "https://repository.jboss.org/nexus/content/repositories/releases/" }
    	maven { url "http://repo.spring.io/libs-snapshot" }
    	maven { url "https://repository.jboss.org/nexus/content/repositories/java.net-m2" }
    	
    	mavenCentral()
		mavenLocal()
	}
//}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'


sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(JavaCompile) {
	//options.bootClasspath = javaBootClasspath
	options.encoding = "UTF-8" 
}
compileJava.options.encoding = 'UTF-8'

version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Mfr Rest API', 'Implementation-Version': 1.0
    }
}
war {
	from 'WebContent'
    baseName = 'api'
    version =  '0.1.0'
    //webXml = file('WebContent/WEB-INF/web.xml')
    //webInf { 
    //    	from 'WebContent/WEB-INF' 
    //}
}
repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    
    compile 'org.springframework:spring-webmvc:3.2.6.RELEASE'
    compile 'com.jayway.jsonpath:json-path:0.8.1'
    compile fileTree(dir: 'lib/compile', include: '*.jar')
    compile 'org.springframework.security:spring-security-web:3.2.0.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.2.0.RELEASE'
    
    compile 'org.springframework:spring-orm:3.2.6.RELEASE'
    compile 'commons-fileupload:commons-fileupload:1.3'
    
    
    
    
    compile 'commons-beanutils:commons-beanutils:1.9.1'
    
    
    
    //compile 'org.slf4j:slf4j-api:1.6.1'
    
    
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    
    //compile 'javax.servlet:servlet-api:3.0-alpha-1'
    
    compile 'javax.persistence:persistence-api:1.0.2'
    
    
    
    compile 'org.hibernate:hibernate-core:4.3.5.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.3.5.Final'
    
    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.2.3'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:2.2.3'
    
    
    compile 'org.hibernate:hibernate-ehcache:4.3.5.Final'
    
    runtime 'org.hibernate:hibernate-osgi:4.3.5.Final'
    runtime 'org.hibernate:hibernate-envers:4.3.5.Final'
    runtime 'org.hibernate:hibernate-c3p0:4.3.5.Final'
    runtime 'org.hibernate:hibernate-proxool:4.3.5.Final'
    //runtime 'org.hibernate:hibernate-infinispan:4.3.5.Final'
    
    runtime 'org.hibernate:hibernate-validator:4.3.1.Final'
    
    runtime 'org.aspectj:aspectjweaver:1.8.0'
    
    runtime 'postgresql:postgresql:9.1-901-1.jdbc4'
    
    

    
    runtime 'com.fasterxml.jackson.core:jackson-core:2.2.3'
    
    runtime 'javax.xml.bind:jaxb-api:2.2.9'
    compile 'joda-time:joda-time:2.3'
    compile 'com.sun.mail:javax.mail:1.5.2'
    compile 'org.apache.velocity:velocity:1.7'
	compile 'org.apache.tika:tika-core:1.8'
    
    
    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    
    
    //runtime 'log4j:log4j:1.2.14'
    runtime 'org.slf4j:slf4j-log4j12:1.6.1'
    
    
    
	runtime 'javax.ejb:ejb-api:3.0'
	
	
	compile 'org.im4java:im4java:1.4.0'
	
	compile fileTree(dir: 'lib/runtime', include: '*.jar')
	
	/*
	runtime 'jboss:jnp-client:3.2.1'
    runtime 'org.jboss.client:jboss-client:5.1.0.CR1'
    runtime 'org.jboss.logging:jboss-logging:3.1.4.GA'
    runtime 'org.jboss.as:jboss-as-security:7.1.3.Final'
    */
    
    testCompile 'org.springframework:spring-test:3.2.3.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.jayway.jsonpath:json-path-assert:0.8.1'
    
    
     
    
}

test {
    systemProperties 'property': 'value'
}


task deployTomcat(dependsOn: war) << {
    println "TOMCAT deploy: copy from ${libsDir.getPath()} into ${tomcatHome}"
    copy{
      from libsDir
      into "${tomcatHome}"
      include '*.war'
    }
  }

task explodedWar(type: Copy) {
    into "${tomcatHome}/${war.baseName}"
    with war
}
task prodExplodedWar(type: Copy) {
    into "${prodTomcatHome}/${war.baseName}"
    with war
}
task copyDBLib(type: Copy) {
	File dblib=new File(dbProject+'/build/mfr_db.jar');
    println "Copy from DB project ${dblib} into ./lib/compile/"
    
    if(dblib.isFile()){
	    copy{
	      from dblib
	      into "./lib/compile/"
		  
	    }
    }else{
    	throw new GradleException("${dbProject}/build/mfr_db.jar file not found")
    }
  }  
task cleanExplodedWar(type: Delete){
	delete "${tomcatHome}/${war.baseName}"
}
task deployJBoss(dependsOn: war) << {
    println "JBOSS deploy: copy from ${libsDir.getPath()} into ${jbossDeployments}"
    copy{
      from libsDir
      into "${jbossDeployments}"
      include '*.war'
    }
  }



uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
